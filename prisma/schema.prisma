generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile{
  id String @id @default(uuid()) // uuid() - функция, генерирующая уникальный идентификатор, используя формат Universally Unique Identifier. UUID - это 128-битное число, которое представлено в виде строки из 36 символов, разделенных дефисами. Короче, генерирует уникальные id для каждой записи
  userId String @unique
  name String
  imageUrl String @db.Text //"@db.Text" - это аннотация или декоратор, которая указывает БД, что это поле будет представленно как текстовое поле
  email String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Server model
model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade) 
  // "@relation" - это аннотация (декоратор), указывающий на наличие отношения между двумя сущностями
  // "fields:[profileId]" - это массив полей текущей сущности, которые связаны с "Profile" 
  // "references: [id]" - это массив полей, с которыми связывается "profileId" текущей сущности
  // "onDelete: Cascade" - это указание о том, что если сущность "Profile" будет удалена, то связанные с ней записи будут удалены каскадно

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId]) // Эта аннотация используется для создания индекса в БД по указанному полу "profileId". Таким образом, гарантирует, что БД будет эффективно организована для быстрого доступа к данным, связанным с "profileId"
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}